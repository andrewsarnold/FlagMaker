using System.Collections.Generic;
using System.Text;
using System.Windows.Controls;
using System.Windows.Media;
using System.Windows.Shapes;

namespace FlagMaker.Overlays.OverlayTypes
{
	public class OverlayHammerSickle : Overlay
	{
		private const int PathSize = 331;

		public OverlayHammerSickle(int maximum)
			: base(new List<Attribute>
			       {
				       new Attribute("X", true, 1),
				       new Attribute("Y", true, 1),
				       new Attribute("Size", true, 1)
			       }, maximum)
		{
		}

		public OverlayHammerSickle(Color color, int x, int y, int size, int maximum)
			: base(color, new List<Attribute>
			              {
				              new Attribute("X", true, x),
				              new Attribute("Y", true, y),
				              new Attribute("Size", true, size)
			              }, maximum)
		{
		}

		public override string Name { get { return "hammer and sickle"; } }

		public override void Draw(Canvas canvas)
		{
			var size = canvas.Width * (Attributes.Get("Size").Value / Maximum);
			var scale = size / PathSize;

			var path = new Path
			{
				Fill = new SolidColorBrush(Color),
				RenderTransform = new ScaleTransform(scale, scale),
				Data = Geometry.Parse("M 164.254974 12.23204 C 194.535339 23.018646 222.562439 40.028168 246.202759 61.798477 C 268.878006 82.930008 288.117722 108.81752 297.274414 138.728317 C 303.480606 157.961777 302.203598 178.745636 298.101044 198.271088 C 294.002823 216.460403 285.999756 233.798843 274.346252 248.389877 C 287.563126 261.312393 300.653366 274.364182 313.904572 287.252655 C 312.139801 293.855621 309.435257 300.603638 304.005859 305.054886 C 299.465988 308.973572 293.653748 310.868225 287.933853 312.292679 C 274.992798 298.847549 261.986115 285.470001 249.037781 272.031631 C 232.908417 283.050217 213.444122 288.858643 194.007156 289.717087 C 169.525848 290.799179 145.053375 282.907913 125.0784 268.890839 C 114.307098 261.488098 104.598373 252.636581 95.691879 243.096588 C 94.166428 244.597137 92.501556 245.943634 90.789642 247.226089 C 91.214157 250.427383 91.674118 253.624557 92.115524 256.82663 C 88.772903 257.018921 85.435776 257.836258 82.627167 259.719742 C 73.961456 265.211548 67.943726 273.736832 61.792953 281.740234 C 54.165894 291.64183 47.310745 302.632355 36.681564 309.645859 C 30.240128 313.625107 20.708603 311.943222 16.763779 305.254715 C 12.637909 298.692505 15.017944 290.222733 19.461853 284.466156 C 30.323013 268.503098 49.715088 261.680603 61.856049 246.973663 C 65.013794 243.02243 67.401718 238.442734 68.586334 233.512604 C 71.687332 233.71077 74.788651 233.912338 77.890717 234.114349 C 80.518143 231.449448 83.158371 228.79808 85.775772 226.124557 C 88.694031 226.049149 91.668106 226.361069 94.549347 225.798492 C 97.5569 223.145828 99.95459 219.884415 102.670731 216.946243 C 105.645813 217.779739 107.336441 220.570358 109.489426 222.563202 C 122.796799 234.682877 138.01445 245.244934 155.358902 250.631073 C 177.538284 257.736435 202.248001 255.479126 223.052994 245.14032 C 181.380951 202.235809 139.848434 159.192871 98.236404 116.229004 C 88.904739 126.05426 79.609406 135.917206 70.144592 145.614273 C 58.585388 133.822159 46.913345 122.141327 35.295532 110.407288 C 57.193848 88.487183 79.337082 66.813171 101.356125 45.014374 C 120.392731 50.196869 139.404922 55.47049 158.459473 60.591125 C 145.438583 72.412354 132.202515 83.993683 119.136063 95.764191 C 162.554657 138.330597 205.758453 181.121857 249.246658 223.620041 C 259.744873 210.847015 265.653168 194.582687 266.45694 178.116196 C 267.937866 156.328033 262.896133 134.653198 255.714066 114.214844 C 245.561722 87.241638 226.151779 65.03537 205.055603 45.933273 C 191.87027 34.213623 178.281265 22.931519 164.254974 12.23204 Z M 164.254974 12.23204"),
				SnapsToDevicePixels = true
			};

			canvas.Children.Add(path);

			if (Maximum % 2 == 0)
			{
				Canvas.SetLeft(path, (canvas.Width * (Attributes.Get("X").Value / Maximum)) - size / 2);
				Canvas.SetTop(path, (canvas.Height * (Attributes.Get("Y").Value / Maximum)) - size / 2);
			}
			else
			{
				Canvas.SetLeft(path, (canvas.Width * (Attributes.Get("X").Value / (Maximum + 1))) - size / 2);
				Canvas.SetTop(path, (canvas.Height * (Attributes.Get("Y").Value / (Maximum + 1))) - size / 2);
			}
		}

		public override void SetValues(List<double> values)
		{
			Attributes.Get("X").Value = values[0];
			Attributes.Get("Y").Value = values[1];
			Attributes.Get("Size").Value = values[2];
		}

		public override string ExportSvg(int width, int height)
		{
			var size = width * (Attributes.Get("Size").Value / Maximum);
			var scale = size / PathSize;

			double x, y;
			if (Maximum % 2 == 0)
			{
				x = width * (Attributes.Get("X").Value / Maximum) - size / 2;
				y = height * (Attributes.Get("Y").Value / Maximum) - size / 2;
			}
			else
			{
				x = width * (Attributes.Get("X").Value / (Maximum + 1)) - size / 2;
				y = height * (Attributes.Get("Y").Value / (Maximum + 1)) - size / 2;
			}

			var sb = new StringBuilder();
			sb.Append(string.Format("<g transform=\"translate({0},{1}) scale({2})\">",
				x, y, scale));
			sb.Append(string.Format("<path d=\"{0}\" fill=\"#{1}\" />",
				Path, Color.ToHexString()));
			sb.Append("</g>");
			return sb.ToString();
		}

		public override IEnumerable<Shape> Thumbnail
		{
			get
			{
				const double scale = 20.0 / PathSize;
				return new List<Shape>
				       {
					       new Path
					       {
						       RenderTransform = new ScaleTransform(scale, scale),
						       Data =
							       Geometry.Parse(
								       "M 164.254974 12.23204 C 194.535339 23.018646 222.562439 40.028168 246.202759 61.798477 C 268.878006 82.930008 288.117722 108.81752 297.274414 138.728317 C 303.480606 157.961777 302.203598 178.745636 298.101044 198.271088 C 294.002823 216.460403 285.999756 233.798843 274.346252 248.389877 C 287.563126 261.312393 300.653366 274.364182 313.904572 287.252655 C 312.139801 293.855621 309.435257 300.603638 304.005859 305.054886 C 299.465988 308.973572 293.653748 310.868225 287.933853 312.292679 C 274.992798 298.847549 261.986115 285.470001 249.037781 272.031631 C 232.908417 283.050217 213.444122 288.858643 194.007156 289.717087 C 169.525848 290.799179 145.053375 282.907913 125.0784 268.890839 C 114.307098 261.488098 104.598373 252.636581 95.691879 243.096588 C 94.166428 244.597137 92.501556 245.943634 90.789642 247.226089 C 91.214157 250.427383 91.674118 253.624557 92.115524 256.82663 C 88.772903 257.018921 85.435776 257.836258 82.627167 259.719742 C 73.961456 265.211548 67.943726 273.736832 61.792953 281.740234 C 54.165894 291.64183 47.310745 302.632355 36.681564 309.645859 C 30.240128 313.625107 20.708603 311.943222 16.763779 305.254715 C 12.637909 298.692505 15.017944 290.222733 19.461853 284.466156 C 30.323013 268.503098 49.715088 261.680603 61.856049 246.973663 C 65.013794 243.02243 67.401718 238.442734 68.586334 233.512604 C 71.687332 233.71077 74.788651 233.912338 77.890717 234.114349 C 80.518143 231.449448 83.158371 228.79808 85.775772 226.124557 C 88.694031 226.049149 91.668106 226.361069 94.549347 225.798492 C 97.5569 223.145828 99.95459 219.884415 102.670731 216.946243 C 105.645813 217.779739 107.336441 220.570358 109.489426 222.563202 C 122.796799 234.682877 138.01445 245.244934 155.358902 250.631073 C 177.538284 257.736435 202.248001 255.479126 223.052994 245.14032 C 181.380951 202.235809 139.848434 159.192871 98.236404 116.229004 C 88.904739 126.05426 79.609406 135.917206 70.144592 145.614273 C 58.585388 133.822159 46.913345 122.141327 35.295532 110.407288 C 57.193848 88.487183 79.337082 66.813171 101.356125 45.014374 C 120.392731 50.196869 139.404922 55.47049 158.459473 60.591125 C 145.438583 72.412354 132.202515 83.993683 119.136063 95.764191 C 162.554657 138.330597 205.758453 181.121857 249.246658 223.620041 C 259.744873 210.847015 265.653168 194.582687 266.45694 178.116196 C 267.937866 156.328033 262.896133 134.653198 255.714066 114.214844 C 245.561722 87.241638 226.151779 65.03537 205.055603 45.933273 C 191.87027 34.213623 178.281265 22.931519 164.254974 12.23204 Z M 164.254974 12.23204"),
						       SnapsToDevicePixels = true
					       }
				       };
			}
		}

		private string Path
		{
			get
			{
				return "M 164.254974 12.23204 C 194.535339 23.018646 222.562439 40.028168 246.202759 61.798477 C 268.878006 82.930008 288.117722 108.81752 297.274414 138.728317 C 303.480606 157.961777 302.203598 178.745636 298.101044 198.271088 C 294.002823 216.460403 285.999756 233.798843 274.346252 248.389877 C 287.563126 261.312393 300.653366 274.364182 313.904572 287.252655 C 312.139801 293.855621 309.435257 300.603638 304.005859 305.054886 C 299.465988 308.973572 293.653748 310.868225 287.933853 312.292679 C 274.992798 298.847549 261.986115 285.470001 249.037781 272.031631 C 232.908417 283.050217 213.444122 288.858643 194.007156 289.717087 C 169.525848 290.799179 145.053375 282.907913 125.0784 268.890839 C 114.307098 261.488098 104.598373 252.636581 95.691879 243.096588 C 94.166428 244.597137 92.501556 245.943634 90.789642 247.226089 C 91.214157 250.427383 91.674118 253.624557 92.115524 256.82663 C 88.772903 257.018921 85.435776 257.836258 82.627167 259.719742 C 73.961456 265.211548 67.943726 273.736832 61.792953 281.740234 C 54.165894 291.64183 47.310745 302.632355 36.681564 309.645859 C 30.240128 313.625107 20.708603 311.943222 16.763779 305.254715 C 12.637909 298.692505 15.017944 290.222733 19.461853 284.466156 C 30.323013 268.503098 49.715088 261.680603 61.856049 246.973663 C 65.013794 243.02243 67.401718 238.442734 68.586334 233.512604 C 71.687332 233.71077 74.788651 233.912338 77.890717 234.114349 C 80.518143 231.449448 83.158371 228.79808 85.775772 226.124557 C 88.694031 226.049149 91.668106 226.361069 94.549347 225.798492 C 97.5569 223.145828 99.95459 219.884415 102.670731 216.946243 C 105.645813 217.779739 107.336441 220.570358 109.489426 222.563202 C 122.796799 234.682877 138.01445 245.244934 155.358902 250.631073 C 177.538284 257.736435 202.248001 255.479126 223.052994 245.14032 C 181.380951 202.235809 139.848434 159.192871 98.236404 116.229004 C 88.904739 126.05426 79.609406 135.917206 70.144592 145.614273 C 58.585388 133.822159 46.913345 122.141327 35.295532 110.407288 C 57.193848 88.487183 79.337082 66.813171 101.356125 45.014374 C 120.392731 50.196869 139.404922 55.47049 158.459473 60.591125 C 145.438583 72.412354 132.202515 83.993683 119.136063 95.764191 C 162.554657 138.330597 205.758453 181.121857 249.246658 223.620041 C 259.744873 210.847015 265.653168 194.582687 266.45694 178.116196 C 267.937866 156.328033 262.896133 134.653198 255.714066 114.214844 C 245.561722 87.241638 226.151779 65.03537 205.055603 45.933273 C 191.87027 34.213623 178.281265 22.931519 164.254974 12.23204 Z M 164.254974 12.23204";
			}
		}
	}
}
